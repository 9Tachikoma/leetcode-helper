<?xml version="1.0"?>
<!--
======================================================================
MIT License

Copyright (c) 2018 Wei SHEN 

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
======================================================================
-->
<project name="com.ciaoshen.leetcode.helper" basedir="." default="generate">

    <!--
    ======================================================================
        DEVELOP DIRECTORY LAYOUT
    ======================================================================
    -->
    <property file="develop.layout.properties"/>


    <!--
    ======================================================================
        DEVELOP CLASSPATH
    ======================================================================
    -->
    <property name="jar.name" value="leetcode-helper.jar"/>
    <path id="develop.classpath">
        <pathelement path="${bin}"/>
        <pathelement path="${res}"/>
        <fileset dir="${lib}">
            <include name="*.jar"/>
            <exclude name="gson-2.8.5.jar"/>
            <exclude name="${jar.name}"/>
        </fileset>
    </path>


    <!--
    ======================================================================
        DEVELOP COMPILE
    ======================================================================
    -->
    <!-- package name: com.ciaoshen.leetcode.helper -->
    <property name="pck.builder" value="com.ciaoshen.leetcode.helper"/>
    <!-- package sub-path in form of [com/ciaoshen/leetcode/helper] with "/" substituted for "." -->
    <loadresource property="builder.subpath">
        <propertyresource name="pck.builder"/>
        <filterchain>
            <tokenfilter>
                <filetokenizer/>
                <replacestring from="." to="/"/>
            </tokenfilter>
        </filterchain>
    </loadresource>
    <!-- package name: com.ciaoshen.leetcode.util -->
    <property name="pck.util" value="com.ciaoshen.leetcode.util"/>
    <!-- package sub-path in form of [com/ciaoshen/leetcode/util] with "/" substituted for "." -->
    <loadresource property="util.subpath">
        <propertyresource name="pck.util"/>
        <filterchain>
            <tokenfilter>
                <filetokenizer/>
                <replacestring from="." to="/"/>
            </tokenfilter>
        </filterchain>
    </loadresource>
   <!-- source code collection -->
   <patternset id="sourcecode">
       <include name="${builder.subpath}/*.java"/>
       <include name="${util.subpath}/*.java"/>
   </patternset>
   <patternset id="not.sourcecode">
       <exclude name="${builder.subpath}/*.java"/>
       <exclude name="${util.subpath}/*.java"/>
   </patternset>
    <!-- compile main source code -->
    <target name="compile.src">
        <echo>Compiling source under ${src} ... </echo>
        <mkdir dir="${bin}"/>
        <javac destdir="${bin}" srcdir="${src}" debug="on" includeantruntime="false">
            <patternset refid="sourcecode"/>
            <classpath refid="develop.classpath"/>
        </javac>
    </target>
    <!-- compile junit test code -->
    <target name="compile.junit">
        <echo>Compiling source under ${test.src} ... </echo>
        <mkdir dir="${bin}"/>
        <javac destdir="${bin}" srcdir="${test.src}" debug="on" includeantruntime="false">
            <patternset refid="sourcecode"/>
            <classpath refid="develop.classpath"/>
        </javac>
    </target>


    <!--
    ======================================================================
        DEVELOP TEST
    ======================================================================
    -->
    <!-- properties of leetcode problem (set by user) -->
    <property file="problem.properties"/>
    <!-- test entry points -->
    <property name="junit.entry" value="${pck.builder}.TesterRunner"/>
    <property name="main.entry" value="${pck.builder}.ProblemBuilder"/>

    <!-- junit unit test -->
    <target name="junit" depends="clean, compile.src, compile.junit">
        <echo>Running junit test ... </echo>
        <java classname="${junit.entry}">
            <arg value="${builder.subpath}"/>
            <!-- <arg value="${util.subpath}"/> -->
            <classpath refid="develop.classpath"/>
        </java>
        <antcall target="clean"/>
    </target>

    <!-- launch the main application -->
    <target name="test" depends="clean, compile.src">
        <echo>Running ProblemBuilder.main() method!</echo>
        <java classname="${main.entry}">
            <arg value="${basedir}"/>
            <arg value="${problem.name}"/>
            <arg value="${problem.pck}"/>
            <arg value="${problem.util}"/>
            <arg value="${problem.members}"/>
            <classpath refid="develop.classpath"/>
        </java>
        <antcall target="clean"/>
    </target>

    <!-- clean files generated during the test -->
    <target name="clean">
        <input message="Delete classes and generated source (y/n)?"
               validargs="y,n"
               addproperty="do.delete"/>
        <condition property="do.abort">
          <equals arg1="n" arg2="${do.delete}"/>
        </condition>
        <fail if="do.abort">Delete operation aborted by user.</fail>
        <echo>Cleaning all generated .class file and .java skeleton!</echo>
        <delete includeemptydirs="true">
            <fileset dir="${bin}"/>
            <fileset dir="${src}">
                <patternset refid="not.sourcecode"/>
            </fileset>
            <fileset dir="${test.src}">
                <patternset refid="not.sourcecode"/>
            </fileset>
        </delete>
    </target>



    <!--
    ======================================================================
        DEPLOY
    ======================================================================
    -->
    <!-- deploy directory -->
    <property name="jar.file" value="${lib}/${jar.name}"/>

    <!-- packaging program into leetcode-helper.jar file -->
    <target name="jar" depends="clean.jar, clean, compile.src">
        <mkdir dir="${lib}"/>
        <jar destfile="${jar.file}">
            <fileset dir="${bin}">
                <include name="com/ciaoshen/leetcode/helper/*.class"/>
                <include name="com/ciaoshen/leetcode/util/*.class"/>
            </fileset>
            <fileset dir="${res}"/>
            <zipgroupfileset dir="lib"> 
                <include name="*.jar"/> 
                <exclude name="gson-2.8.5.jar"/>
                <exclude name="${deploy.name}"/>
            </zipgroupfileset>
            <fileset file="LICENSE"/>
        </jar>
        <echo>lib/leetcode-helper.jar generated!</echo>
        <antcall target="clean"/>
    </target>

    <!-- clean leetcode-helper.jar -->
    <target name="clean.jar">
        <delete file="${jar.file}" failonerror="false"/>
        <echo>lib/leetcode-helper.jar deleted!</echo>
    </target>

    <!-- classpath contains only leetcode-helper.jar -->
    <path id="single.jar">
        <fileset file="${jar.file}"/>
    </path>

    <!-- run with single leetcode-helper.jar library -->
    <target name="test.jar" depends="jar">
        <echo>Running ProblemBuilder from main() method!</echo>
        <java classname="${main.entry}">
            <arg value="${basedir}"/>
            <arg value="${problem.name}"/>
            <arg value="${problem.pck}"/>
            <arg value="${problem.util}"/>
            <arg value="${problem.members}"/>
            <classpath refid="single.jar"/>
        </java>
        <antcall target="clean.jar"/>
    </target>

    <!-- deploy destination on my laptop -->
    <property name="deploy.root" value="/Users/Wei/github/leetcode/java"/>

    <!-- deploy -->
    <target name="deploy" depends="clean.deploy, jar">
        <echo>Installing helper to leetcode java root.</echo>
        <mkdir dir="${deploy.root}"/>
        <copy todir="${deploy.root}">
            <file name="${basedir}/build-release.xml"/>
            <globmapper from="build-release.*" to="build.*"/>
        </copy>
        <copy todir="${deploy.root}">
            <file name="${basedir}/problem.properties"/>
        </copy>
        <mkdir dir="${deploy.root}/${lib}"/>
        <copy file="${jar.file}" todir="${deploy.root}/${lib}"/>
        <antcall target="clean.jar"/>
    </target>

    <!-- clean last deployment -->
    <target name="clean.deploy">
        <echo>Uninstalling ${deploy.name} from leetcode java root ... </echo>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${deploy.root}">
                <include name="problem.properties"/>
                <include name="build.xml"/>
            </fileset>
            <file name="${deploy.root}/${lib}/${jar.name}"/>
        </delete>
    </target>


    <!--
    ======================================================================
        RELEASE
    ======================================================================
    -->
    <!-- release directory -->
    <property name="release.root" value="release"/>
    <property name="release.version" value="v0.4"/>
    <property name="release.name" value="leetcode-helper-${release.version}"/>

    <!-- release .tar, tar.gz, .zip -->
    <target name="release" 
        depends="clean.release, jar, release.prepare, 
                release.zip,
                release.tar,
                release.finish"/>

    <!-- copy files to be released into release directory -->
    <target name="release.prepare">
        <mkdir dir="${release.root}"/>
        <copy todir="${release.root}">
            <file name="${basedir}/build-release.xml"/>
            <globmapper from="build-release.*" to="build.*"/>
        </copy>
        <copy todir="${release.root}">
            <file name="${basedir}/problem.properties"/>
        </copy>
        <copy todir="${release.root}">
            <file name="${basedir}/USER-README.md"/>
            <globmapper from="USER-README.*" to="README.*"/>
        </copy>
        <mkdir dir="${release.root}/${lib}"/>
        <copy file="${jar.file}" todir="${release.root}/${lib}"/>
    </target>
    
    <!-- predefine group of files to be included in release -->
    <patternset id="release.at.root">
        <include name="build.xml"/>
        <include name="problem.properties"/>
        <include name="README.md"/>
    </patternset>

    <!-- achieve to tar -->
    <target name="release.tar">
        <tar destfile="${release.root}/${release.name}.tar">
            <tarfileset dir="${release.root}" prefix="">
                <patternset refid="release.at.root"/>
            </tarfileset> 
            <tarfileset dir="${release.root}/${lib}" prefix="lib/"/>
        </tar>
        <gzip destfile="${release.root}/${release.name}.tar.gz" src="${release.root}/${release.name}.tar"/>
    </target>

    <!-- compress into zip -->
    <target name="release.zip">
        <zip destfile="${release.root}/${release.name}.zip" update="true">
            <zipfileset dir="${release.root}" prefix="">
                <patternset refid="release.at.root"/>
            </zipfileset>
            <zipfileset dir="${release.root}/${lib}" prefix="lib/"/>
        </zip>
    </target>

    <!-- clean up redundant files -->
    <target name="release.finish">
        <echo>Clean up release directory.</echo>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${release.root}">
                <patternset refid="release.at.root"/>
            </fileset>
        </delete>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${release.root}/${lib}"/>
        </delete>
        <antcall target="clean.jar"/>
    </target>
    <!-- delete last release -->
    <target name="clean.release">
        <echo>Delete zip file.</echo>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${release.root}"/>
        </delete>
    </target>


    <!--
    ======================================================================
        CLEAN EVERYTHING
    ======================================================================
    -->
    <target name="clean.all" depends="clean, clean.jar, clean.release"/>

</project>
