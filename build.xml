<?xml version="1.0"?>
<project name="com.ciaoshen.leetcode.helper" basedir="." default="generate">

    <!-- ================================= properties ================================== -->
    <!-- read properties from a existing file -->
    <property file="build.properties"/>

    <!-- entry points -->
    <property name="builder.pck" value="com.ciaoshen.leetcode.helper"/>
    <property name="junit.entry" value="${builder.pck}.TestRunner"/>
    <property name="main.entry" value="${builder.pck}.ProblemBuilder"/>


    <!-- ================================= classpath ================================== -->

    <!-- build classpath collection with a path-like structure -->
    <path id="classpath">
        <pathelement path="${bin.dir}"/>
        <fileset dir="${lib.dir}">
            <include name="velocity-engine-core-2.0.jar"/>
            <include name="junit-4.10.jar"/>
            <include name="slf4j-api-1.7.25.jar"/>
            <include name="slf4j-simple-1.7.25.jar"/>
            <include name="commons-lang3-3.8.jar"/>
            <include name="java-hamcrest-2.0.0.0.jar"/>
        </fileset>
    </path>

    <!-- use only the single jar to release -->
    <path id="single.jar">
        <fileset dir="${bin.dir}">
            <exclude name="com/ciaoshen/leetcode/helper/"/>
            <exclude name="com/ciaoshen/leetcode/util/"/>
        </fileset>
        <fileset dir="${lib.dir}">
            <include name="leetcode-helper.jar"/>
            <exclude name="velocity-engine-core-2.0.jar"/>
            <exclude name="junit-4.10.jar"/>
            <exclude name="slf4j-api-1.7.25.jar"/>
            <exclude name="slf4j-simple-1.7.25.jar"/>
            <exclude name="commons-lang3-3.8.jar"/>
            <exclude name="java-hamcrest-2.0.0.0.jar"/>
            <exclude name="gson-2.8.5"/>
        </fileset>
    </path>


    <!-- ================================= targets to test helper ================================== -->

    <!-- @CONFIRMED -->
    <target name="compile.src" description="Compile helper source codes.">
        <echo>Compiling .java source file under ${main.dir} ... </echo>
        <mkdir dir="${bin.dir}"/> <!-- ant will not re-create an existing dir -->
        <javac destdir="${bin.dir}" srcdir="${main.dir}" debug="on" includeantruntime="false">
            <include name="**/*.java"/>
            <classpath refid="classpath"/>
        </javac>
    </target>
    <!-- @CONFIRMED -->
    <target name="compile.junit" description="Compile helper junit test source codes.">
        <echo>Compiling .java source file under ${test.dir} ... </echo>
        <mkdir dir="${bin.dir}"/>
        <javac destdir="${bin.dir}" srcdir="${test.dir}" debug="on" includeantruntime="false">
            <include name="**/*.java"/>
            <classpath refid="classpath"/>
        </javac>
    </target>
    <!-- @CONFIRMED -->
    <target name="junit" depends="compile.src,compile.junit"
        description="Compile and run helper JUnit test.">
        <echo>Running JUnit Test ... </echo>
        <java classname="${junit.entry}">
            <classpath refid="classpath"/>
        </java>
    </target>
    <!-- @CONFIRMED -->
    <target name="run" depends="compile.src"
        description="Compile and run ProblemBuilder main() method">
        <echo>Running ProblemBuilder from main() method!</echo>
        <java classname="${main.entry}">
            <arg value="${tpl.dir}"/>
            <arg value="${main.dir}"/>
            <arg value="${test.dir}"/>
            <arg value="${pck}"/>
            <arg value="${problem}"/>
            <arg value="${util}"/>
            <classpath refid="classpath"/>
        </java>
    </target>
    <!-- @CONFIRMED -->
    <target name="clean" description="Clean all generated files of helper project.">
        <input message="Delete all generated files (y/n)?"
               validargs="y,n"
               addproperty="do.delete"/>
        <condition property="do.abort">
          <equals arg1="n" arg2="${do.delete}"/>
        </condition>
        <fail if="do.abort">Delete operation aborted by user.</fail>
        <echo>Cleaning all generated .class file and .java skeleton!</echo>
        <delete includeemptydirs="true">
            <fileset dir="${bin.dir}">
                <include name="com/ciaoshen/leetcode/helper/"/> <!-- must keep last slash -->
                <include name="com/ciaoshen/leetcode/util/"/>  <!-- must keep last slash -->
            </fileset>
            <fileset dir="${main.dir}">
                <exclude name="com/ciaoshen/leetcode/helper/*.java"/>
                <exclude name="com/ciaoshen/leetcode/util/*.java"/>
            </fileset>
            <fileset dir="${test.dir}">
                <exclude name="com/ciaoshen/leetcode/helper/*.java"/>
                <exclude name="com/ciaoshen/leetcode/util/*.java"/>
            </fileset>
        </delete>
    </target>


    <!-- ================================= targets to deploy leetcode-helper on my computer ================================== -->

    <!-- deploy properties -->
    <property name="deploy.bin" value="${deploy.root}/bin"/>
    <property name="deploy.lib" value="${deploy.root}/lib"/>
    <property name="deploy.tpl" value="${deploy.root}/src/main/resources"/>

    <!-- @CONFIRMED -->
    <target name="clean.jar" description="Delete my leetcode-helper jar.">
        <delete failonerror="false">
            <fileset dir="${lib.dir}">
                 <include name="leetcode-helper.jar"/>
             </fileset>
         </delete>
         <echo>lib/leetcode-helper.jar deleted!</echo>
    </target>
    <!-- @CONFIRMED -->
    <target name="jar" depends="clean.jar, clean, compile.src"
        description="Compress all libraries to a single jar file leetcode-helper.">
        <mkdir dir="${lib.dir}"/>
        <jar destfile="${lib.dir}/leetcode-helper.jar">
            <fileset dir="${bin.dir}">
                 <include name="com/ciaoshen/leetcode/helper/*.class"/>
                 <include name="com/ciaoshen/leetcode/util/*.class"/>
            </fileset>
            <archives>
               <zips>
                   <fileset dir="${lib.dir}" includes="**/*.jar"/>
               </zips>
            </archives>
        </jar>
         <echo>lib/leetcode-helper.jar generated!</echo>
    </target>
    <!-- @CONFIRMED -->
    <target name="test.jar" depends="jar"
        description="Compile and run ProblemBuilder main() method using single leetcode-helper.jar">
        <echo>Running ProblemBuilder from main() method!</echo>
        <java classname="${main.entry}">
            <arg value="${tpl.dir}"/>
            <arg value="${main.dir}"/>
            <arg value="${test.dir}"/>
            <arg value="${pck}"/>
            <arg value="${problem}"/>
            <arg value="${util}"/>
            <classpath refid="single.jar"/>
        </java>
    </target>
    <!-- @CONFIRMED -->
    <target name="clean.deploy" description="Clean last deployment.">
        <echo>Uninstalling helper from leetcode java root ... </echo>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${deploy.root}">
                <include name="build.properties"/>
                <include name="build.xml"/>
            </fileset>
            <fileset dir="${deploy.lib}">
                <include name="leetcode-helper.jar"/> <!-- one single jar -->
            </fileset>
            <fileset dir="${deploy.tpl}">
                <include name="*.vm"/>
            </fileset>
        </delete>
    </target>
    <!-- @CONFIRMED -->
    <target name="deploy" depends="clean.deploy, jar"
        description="Deploy helper generator to leetcode java repository.">
        <echo>Installing helper to leetcode java root.</echo>
        <mkdir dir="${deploy.root}"/>
        <copy todir="${deploy.root}"> <!-- ant will overwrite the existing file -->
            <fileset dir=".">
                <include name="build-release.properties"/>
                <include name="build-release.xml"/>
            </fileset>
            <globmapper from="build-release.*" to="build.*"/>
        </copy>
        <mkdir dir="${deploy.lib}"/>
        <copy todir="${deploy.lib}">
            <fileset dir="${lib.dir}">
                <include name="leetcode-helper.jar"/> <!-- deploy the single jar -->
            </fileset>
        </copy>
        <mkdir dir="${deploy.tpl}"/>
        <copy todir="${deploy.tpl}">
            <fileset dir="${tpl.dir}">
                <include name="*.vm"/>
            </fileset>
        </copy>
    </target>


    <!-- ================================= targets to release leetcode-helper tool to public ================================== -->
    <!-- @CONFIRMED -->
    <property name="release.dir" value="release"/>
    <property name="release.lib" value="${release.dir}/lib"/>
    <property name="release.tpl" value="${release.dir}/src/main/resources"/>
    <!-- @CONFIRMED -->
    <target name="clean.release" description="Clean last release.">
        <echo>Delete the compressed zip file.</echo>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${release.dir}/"/>
        </delete>
    </target>
    <!-- @CONFIRMED -->
    <target name="release" depends="clean.release, jar"
        description="Zip all config files, jar files and template files into 1 .zip file.">
        <echo>Compress a final zip file to release.</echo>
        <mkdir dir="${release.dir}"/>
        <copy todir="${release.dir}">
            <fileset dir=".">
                <include name="build-release.properties"/>
                <include name="build-release.xml"/>
            </fileset>
            <globmapper from="build-release.*" to="build.*"/>
        </copy>
        <mkdir dir="${release.lib}"/>
        <copy todir="${release.lib}">
            <fileset dir="${lib.dir}">
                <include name="leetcode-helper.jar"/>
            </fileset>
        </copy>
        <mkdir dir="${release.tpl}"/>
        <copy todir="${release.tpl}">
            <fileset dir="${tpl.dir}">
                <include name="*.vm"/>
            </fileset>
        </copy>
        <zip destfile="${release.dir}/leetcode-helper.zip" update="true">
            <fileset dir="${release.dir}">
                <include name="build.xml"/>
                <include name="build.properties"/>
            </fileset>
            <fileset dir="${release.lib}">
                <include name="leetcode-helper.jar"/>
            </fileset>
            <fileset dir="${release.tpl}">
                <include name="*.vm"/>
            </fileset>
        </zip>
    </target>

    <!-- @CONFIRMED -->
    <target name="clean.all" depends="clean, clean.jar, clean.release"
        description="A shotcut to delete everything generated by this project!"/>



    <!-- ================================= release version ================================== -->

    <!--    @CONFIRMED
            @RELEASE -->
    <target name="generate.problem" description="Generate project skeleton for a problem.">
        <java classname="${main.entry}">
            <arg value="${tpl.dir}"/>
            <arg value="${main.dir}"/>
            <arg value="${test.dir}"/>
            <arg value="${pck}"/>
            <arg value="${problem}"/>
            <arg value="${util}"/>
            <classpath refid="single.jar"/>
        </java>
        <echo>Problem ${problem} generated! </echo>
    </target>
    <!--    @CONFIRMED
            @RELEASE-->
    <target name="compile.problem" description="Compile the generated problem.">
        <echo>Compile source code for problem ${problem} ... </echo>
        <mkdir dir="${bin.dir}"/>
        <javac destdir="${bin.dir}" srcdir="${main.dir}" debug="on" includeantruntime="false">
            <include name="**/${problem}/*.java"/>
            <classpath refid="single.jar"/>
        </javac>
        <javac destdir="${bin.dir}" srcdir="${test.dir}" debug="on" includeantruntime="false">
            <include name="**/${problem}/*.java"/>
            <classpath refid="single.jar"/>
        </javac>
    </target>
    <!--    @CONFIRMED
            @RELEASE -->
    <target name="test.problem" description="Test a specific generated problem.">
        <echo>Test generated problem ${problem} ... </echo>
        <java classname="${pck}.${problem}.TesterRunner">
            <classpath refid="single.jar"/>
        </java>
    </target>
    <!--    @CONFIRMED
            @RELEASE -->
    <target name="clean.problem" description="Clean everything about a specific problem.">
        <input message="Delete all source code of problem ${problem} (y/n)?"
               validargs="y,n"
               addproperty="do.delete"/>
        <condition property="do.abort">
          <equals arg1="n" arg2="${do.delete}"/>
        </condition>
        <fail if="do.abort">Delete operation aborted by user.</fail>
        <delete includeemptydirs="true">
            <fileset dir="${bin.dir}">
                <include name="**/${problem}"/>
            </fileset>
            <fileset dir="${main.dir}">
                <include name="**/${problem}/"/>
            </fileset>
            <fileset dir="${test.dir}">
                <include name="**/${problem}/"/>
            </fileset>
        </delete>
    </target>
</project>
