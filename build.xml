<?xml version="1.0"?>
<project name="com.ciaoshen.leetcode.helper" basedir="." default="generate">

    <!--
    ======================================================================
        DEVELOP DIRECTORY LAYOUT
    ======================================================================
    -->
    <property file="develop.layout.properties"/>


    <!--
    ======================================================================
        DEVELOP CLASSPATH
    ======================================================================
    -->
    <path id="develop.classpath">
        <pathelement path="${bin}"/>
        <pathelement path="${res}"/>
        <fileset dir="${lib}">
            <include name="*.jar"/>
            <exclude name="gson-2.8.5.jar"/>
        </fileset>
    </path>


    <!--
    ======================================================================
        DEVELOP COMPILE
    ======================================================================
    -->
    <!-- package name: com.ciaoshen.leetcode.helper -->
    <property name="pck.builder" value="com.ciaoshen.leetcode.helper"/>
    <!-- package sub-path in form of [com/ciaoshen/leetcode/helper] with "/" substituted for "." -->
    <loadresource property="builder.subpath">
        <propertyresource name="pck.builder"/>
        <filterchain>
            <tokenfilter>
                <filetokenizer/>
                <replacestring from="." to="/"/>
            </tokenfilter>
        </filterchain>
    </loadresource>
    <!-- package name: com.ciaoshen.leetcode.util -->
    <property name="pck.util" value="com.ciaoshen.leetcode.util"/>
    <!-- package sub-path in form of [com/ciaoshen/leetcode/util] with "/" substituted for "." -->
    <loadresource property="util.subpath">
        <propertyresource name="pck.util"/>
        <filterchain>
            <tokenfilter>
                <filetokenizer/>
                <replacestring from="." to="/"/>
            </tokenfilter>
        </filterchain>
    </loadresource>
   <!-- source code collection -->
   <patternset id="sourcecode">
       <include name="${builder.subpath}/*.java"/>
       <include name="${util.subpath}/*.java"/>
   </patternset>
   <patternset id="not.sourcecode">
       <exclude name="${builder.subpath}/*.java"/>
       <exclude name="${util.subpath}/*.java"/>
   </patternset>
    <!-- compile main source code -->
    <target name="compile.src">
        <echo>Compiling source under ${src} ... </echo>
        <mkdir dir="${bin}"/>
        <javac destdir="${bin}" srcdir="${src}" debug="on" includeantruntime="false">
            <patternset refid="sourcecode"/>
            <classpath refid="develop.classpath"/>
        </javac>
    </target>
    <!-- compile junit test code -->
    <target name="compile.junit">
        <echo>Compiling source under ${test.src} ... </echo>
        <mkdir dir="${bin}"/>
        <javac destdir="${bin}" srcdir="${test.src}" debug="on" includeantruntime="false">
            <patternset refid="sourcecode"/>
            <classpath refid="develop.classpath"/>
        </javac>
    </target>


    <!--
    ======================================================================
        DEVELOP TEST
    ======================================================================
    -->
    <!-- properties of leetcode problem (set by user) -->
    <property file="problem.properties"/>
    <!-- test entry points -->
    <property name="junit.entry" value="${pck.builder}.TesterRunner"/>
    <property name="main.entry" value="${pck.builder}.ProblemBuilder"/>

    <!-- junit unit test -->
    <target name="junit" depends="clean, compile.src, compile.junit">
        <echo>Running junit test ... </echo>
        <java classname="${junit.entry}">
            <arg value="${builder.subpath}"/>
            <!-- <arg value="${util.subpath}"/> -->
            <classpath refid="develop.classpath"/>
        </java>
        <antcall target="clean"/>
    </target>

    <!-- launch the main application -->
    <target name="test" depends="clean, compile.src">
        <echo>Running ProblemBuilder.main() method!</echo>
        <java classname="${main.entry}">
            <arg value="${basedir}"/>
            <arg value="${problem.name}"/>
            <arg value="${problem.pck}"/>
            <arg value="${problem.util}"/>
            <classpath refid="develop.classpath"/>
        </java>
        <antcall target="clean"/>
    </target>

    <!-- clean files generated during the test -->
    <target name="clean">
        <input message="Delete classes and generated source (y/n)?"
               validargs="y,n"
               addproperty="do.delete"/>
        <condition property="do.abort">
          <equals arg1="n" arg2="${do.delete}"/>
        </condition>
        <fail if="do.abort">Delete operation aborted by user.</fail>
        <echo>Cleaning all generated .class file and .java skeleton!</echo>
        <delete includeemptydirs="true">
            <fileset dir="${bin}"/>
            <fileset dir="${src}">
                <patternset refid="not.sourcecode"/>
            </fileset>
            <fileset dir="${test.src}">
                <patternset refid="not.sourcecode"/>
            </fileset>
        </delete>
    </target>



    <!--
    ======================================================================
        DEPLOY
    ======================================================================
    -->
    <!-- deploy directory -->
    <!-- <property name="deploy.root" value="/Users/Wei/github/leetcode/java"/>
    <property name="deploy.name" value="leetcode-helper.jar"/> -->

    <!-- run with single leetcode-helper.jar library -->
    <!-- <path id="deploy">
        <pathelement path="${lib}/deploy.name"/>
    </path> -->

    <!-- packaging program into leetcode-helper.jar file -->
    <!-- <target name="jar" depends="clean.jar, clean, compile.src">
        <mkdir dir="${lib.dir}"/>
        <jar destfile="${lib.dir}/${deploy.name}">
            <fileset dir="${bin.dir}">
                 <include name="com/ciaoshen/leetcode/helper/*.class"/>
                 <include name="com/ciaoshen/leetcode/util/*.class"/>
            </fileset>
            <archives>
               <zips>
                   <fileset dir="${lib.dir}">
                       <include name="**/*.jar"/>
                       <exclude name="gson-2.8.5.jar"/>
                       <exclude name="${deploy.name}"/>
                   </fileset>
               </zips>
            </archives>
        </jar>
        <echo>lib/leetcode-helper.jar generated!</echo>
        <antcall target="clean"/>
    </target> -->

    <!-- clean leetcode-helper.jar -->
    <!-- <target name="clean.jar">
        <delete file="${lib.dir}/${deploy.name}" failonerror="false"/>
        <echo>lib/leetcode-helper.jar deleted!</echo>
    </target> -->

    <!-- test leetcode-helper.jar -->
    <!-- <target name="test.jar" depends="jar">
        <echo>Running ProblemBuilder from main() method!</echo>
        <java classname="${main.entry}">
            <arg value="${tpl.dir}"/>
            <arg value="${main.dir}"/>
            <arg value="${test.dir}"/>
            <arg value="${pck}"/>
            <arg value="${problem}"/>
            <arg value="${util}"/>
            <classpath refid="single.jar"/>
        </java>
        <antcall target="clean.jar"/>
    </target> -->

    <!-- deploy my program -->
    <!-- <target name="deploy" depends="clean.deploy, jar">
        <echo>Installing helper to leetcode java root.</echo>
        <mkdir dir="${deploy.root}"/>
        <copy todir="${deploy.root}">
            <fileset dir=".">
                <include name="build-release.properties"/>
                <include name="build-release.xml"/>
            </fileset>
            <globmapper from="build-release.*" to="build.*"/>
        </copy>
        <mkdir dir="${deploy.lib}"/>
        <copy file="${lib.dir}/${deploy.name}" todir="${deploy.lib}"/>
        <mkdir dir="${deploy.tpl}"/>
        <copy todir="${deploy.tpl}">
            <fileset dir="${tpl.dir}">
                <include name="*.vm"/>
                <include name="*.properties"/>
            </fileset>
        </copy>
        <antcall target="clean.jar"/>
    </target> -->

    <!-- clean last deployment -->
    <!-- <target name="clean.deploy">
        <echo>Uninstalling ${deploy.name} from leetcode java root ... </echo>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${deploy.root}">
                <include name="build.properties"/>
                <include name="build.xml"/>
            </fileset>
            <file name="${deploy.lib}/${deploy.name}"/>
            <fileset dir="${deploy.tpl}">
                <include name="*.vm"/>
                <include name="*.properties"/>
            </fileset>
        </delete>
    </target> -->


    <!--
    ======================================================================
        RELEASE
    ======================================================================
    -->
    <!-- release directory -->
    <!-- <property name="release.root" value="release"/>
    <property name="release.name" value="leetcode-helper.zip"/> -->
    <!-- compress a release version into leetcode-helper.zip achieve -->
    <!-- <target name="release" depends="clean.release, jar">
        <echo>Compress a final zip file to release.</echo>
        <mkdir dir="${release.dir}"/>
        <copy todir="${release.dir}">
            <fileset dir=".">
                <include name="build-release.properties"/>
                <include name="build-release.xml"/>
            </fileset>
            <globmapper from="build-release.*" to="build.*"/>
        </copy>
        <mkdir dir="${release.lib}"/>
        <copy file="${lib.dir}/${deploy.name}" todir="${release.lib}"/>
        <mkdir dir="${release.tpl}"/>
        <copy todir="${release.tpl}">
            <fileset dir="${tpl.dir}">
                <include name="*.vm"/>
                <include name="*.properties"/>
            </fileset>
        </copy>
        <zip destfile="${release.dir}/${release.name}" update="true">
            <zipfileset dir="${release.dir}" prefix=""/>
            <zipfileset dir="${release.lib}" prefix="lib/"/>
            <zipfileset dir="${release.tpl}" prefix="src/main/resources/"/>
        </zip>
        <antcall target="clean.jar"/>
        <echo>Clean all moudles in release directory.</echo>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${release.dir}">
                <exclude name="${release.name}"/>
            </fileset>
        </delete>
    </target> -->

    <!-- clean last release leetcode-helper.zip achieve -->
    <!-- <target name="clean.release">
        <echo>Delete the compressed zip file.</echo>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${release.dir}"/>
        </delete>
    </target> -->


    <!--
    ======================================================================
        CLEAN EVERYTHING
    ======================================================================
    -->
    <!-- <target name="clean.all" depends="clean, clean.jar, clean.release"/> -->

</project>
